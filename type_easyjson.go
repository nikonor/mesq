// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package mesq

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonBc289ab0DecodeMesq(in *jlexer.Lexer, out *IncomMessageType) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "datetime":
			out.Datetime = string(in.String())
		case "events":
			easyjsonBc289ab0Decode(in, &out.Events)
		case "id":
			out.ID = string(in.String())
		case "systemId":
			out.SystemID = string(in.String())
		case "token":
			out.Token = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonBc289ab0EncodeMesq(out *jwriter.Writer, in IncomMessageType) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"datetime\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Datetime))
	}
	{
		const prefix string = ",\"events\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjsonBc289ab0Encode(out, in.Events)
	}
	{
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"systemId\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.SystemID))
	}
	{
		const prefix string = ",\"token\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Token))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v IncomMessageType) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonBc289ab0EncodeMesq(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v IncomMessageType) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonBc289ab0EncodeMesq(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *IncomMessageType) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonBc289ab0DecodeMesq(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *IncomMessageType) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonBc289ab0DecodeMesq(l, v)
}
func easyjsonBc289ab0Decode(in *jlexer.Lexer, out *struct {
	Event []EventType `json:"event"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "event":
			if in.IsNull() {
				in.Skip()
				out.Event = nil
			} else {
				in.Delim('[')
				if out.Event == nil {
					if !in.IsDelim(']') {
						out.Event = make([]EventType, 0, 1)
					} else {
						out.Event = []EventType{}
					}
				} else {
					out.Event = (out.Event)[:0]
				}
				for !in.IsDelim(']') {
					var v1 EventType
					(v1).UnmarshalEasyJSON(in)
					out.Event = append(out.Event, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonBc289ab0Encode(out *jwriter.Writer, in struct {
	Event []EventType `json:"event"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"event\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Event == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.Event {
				if v2 > 0 {
					out.RawByte(',')
				}
				(v3).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjsonBc289ab0DecodeMesq1(in *jlexer.Lexer, out *EventType) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "datetime":
			out.Datetime = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "filters":
			easyjsonBc289ab0Decode1(in, &out.Filters)
		case "id":
			out.ID = string(in.String())
		case "message":
			easyjsonBc289ab0Decode2(in, &out.Message)
		case "streamId":
			out.StreamID = int(in.Int())
		case "typeId":
			out.TypeID = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonBc289ab0EncodeMesq1(out *jwriter.Writer, in EventType) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"datetime\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Datetime))
	}
	{
		const prefix string = ",\"description\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"filters\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjsonBc289ab0Encode1(out, in.Filters)
	}
	{
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"message\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjsonBc289ab0Encode2(out, in.Message)
	}
	{
		const prefix string = ",\"streamId\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.StreamID))
	}
	{
		const prefix string = ",\"typeId\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.TypeID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v EventType) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonBc289ab0EncodeMesq1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v EventType) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonBc289ab0EncodeMesq1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *EventType) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonBc289ab0DecodeMesq1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *EventType) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonBc289ab0DecodeMesq1(l, v)
}
func easyjsonBc289ab0Decode2(in *jlexer.Lexer, out *struct {
	Parameters struct {
		Parameter []struct {
			Name  string `json:"name"`
			Value string `json:"value"`
		} `json:"parameter"`
	} `json:"parameters"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "parameters":
			easyjsonBc289ab0Decode3(in, &out.Parameters)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonBc289ab0Encode2(out *jwriter.Writer, in struct {
	Parameters struct {
		Parameter []struct {
			Name  string `json:"name"`
			Value string `json:"value"`
		} `json:"parameter"`
	} `json:"parameters"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"parameters\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjsonBc289ab0Encode3(out, in.Parameters)
	}
	out.RawByte('}')
}
func easyjsonBc289ab0Decode3(in *jlexer.Lexer, out *struct {
	Parameter []struct {
		Name  string `json:"name"`
		Value string `json:"value"`
	} `json:"parameter"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "parameter":
			if in.IsNull() {
				in.Skip()
				out.Parameter = nil
			} else {
				in.Delim('[')
				if out.Parameter == nil {
					if !in.IsDelim(']') {
						out.Parameter = make([]struct {
							Name  string `json:"name"`
							Value string `json:"value"`
						}, 0, 2)
					} else {
						out.Parameter = []struct {
							Name  string `json:"name"`
							Value string `json:"value"`
						}{}
					}
				} else {
					out.Parameter = (out.Parameter)[:0]
				}
				for !in.IsDelim(']') {
					var v4 struct {
						Name  string `json:"name"`
						Value string `json:"value"`
					}
					easyjsonBc289ab0Decode4(in, &v4)
					out.Parameter = append(out.Parameter, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonBc289ab0Encode3(out *jwriter.Writer, in struct {
	Parameter []struct {
		Name  string `json:"name"`
		Value string `json:"value"`
	} `json:"parameter"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"parameter\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Parameter == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v5, v6 := range in.Parameter {
				if v5 > 0 {
					out.RawByte(',')
				}
				easyjsonBc289ab0Encode4(out, v6)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjsonBc289ab0Decode4(in *jlexer.Lexer, out *struct {
	Name  string `json:"name"`
	Value string `json:"value"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "value":
			out.Value = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonBc289ab0Encode4(out *jwriter.Writer, in struct {
	Name  string `json:"name"`
	Value string `json:"value"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"value\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Value))
	}
	out.RawByte('}')
}
func easyjsonBc289ab0Decode1(in *jlexer.Lexer, out *struct {
	Filter []struct {
		Persons struct {
			Person []struct {
				SSOID string `json:"SSOID"`
			} `json:"person"`
		} `json:"persons"`
	} `json:"filter"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "filter":
			if in.IsNull() {
				in.Skip()
				out.Filter = nil
			} else {
				in.Delim('[')
				if out.Filter == nil {
					if !in.IsDelim(']') {
						out.Filter = make([]struct {
							Persons struct {
								Person []struct {
									SSOID string `json:"SSOID"`
								} `json:"person"`
							} `json:"persons"`
						}, 0, 2)
					} else {
						out.Filter = []struct {
							Persons struct {
								Person []struct {
									SSOID string `json:"SSOID"`
								} `json:"person"`
							} `json:"persons"`
						}{}
					}
				} else {
					out.Filter = (out.Filter)[:0]
				}
				for !in.IsDelim(']') {
					var v7 struct {
						Persons struct {
							Person []struct {
								SSOID string `json:"SSOID"`
							} `json:"person"`
						} `json:"persons"`
					}
					easyjsonBc289ab0Decode5(in, &v7)
					out.Filter = append(out.Filter, v7)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonBc289ab0Encode1(out *jwriter.Writer, in struct {
	Filter []struct {
		Persons struct {
			Person []struct {
				SSOID string `json:"SSOID"`
			} `json:"person"`
		} `json:"persons"`
	} `json:"filter"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"filter\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Filter == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v8, v9 := range in.Filter {
				if v8 > 0 {
					out.RawByte(',')
				}
				easyjsonBc289ab0Encode5(out, v9)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjsonBc289ab0Decode5(in *jlexer.Lexer, out *struct {
	Persons struct {
		Person []struct {
			SSOID string `json:"SSOID"`
		} `json:"person"`
	} `json:"persons"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "persons":
			easyjsonBc289ab0Decode6(in, &out.Persons)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonBc289ab0Encode5(out *jwriter.Writer, in struct {
	Persons struct {
		Person []struct {
			SSOID string `json:"SSOID"`
		} `json:"person"`
	} `json:"persons"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"persons\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjsonBc289ab0Encode6(out, in.Persons)
	}
	out.RawByte('}')
}
func easyjsonBc289ab0Decode6(in *jlexer.Lexer, out *struct {
	Person []struct {
		SSOID string `json:"SSOID"`
	} `json:"person"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "person":
			if in.IsNull() {
				in.Skip()
				out.Person = nil
			} else {
				in.Delim('[')
				if out.Person == nil {
					if !in.IsDelim(']') {
						out.Person = make([]struct {
							SSOID string `json:"SSOID"`
						}, 0, 4)
					} else {
						out.Person = []struct {
							SSOID string `json:"SSOID"`
						}{}
					}
				} else {
					out.Person = (out.Person)[:0]
				}
				for !in.IsDelim(']') {
					var v10 struct {
						SSOID string `json:"SSOID"`
					}
					easyjsonBc289ab0Decode7(in, &v10)
					out.Person = append(out.Person, v10)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonBc289ab0Encode6(out *jwriter.Writer, in struct {
	Person []struct {
		SSOID string `json:"SSOID"`
	} `json:"person"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"person\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Person == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v11, v12 := range in.Person {
				if v11 > 0 {
					out.RawByte(',')
				}
				easyjsonBc289ab0Encode7(out, v12)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjsonBc289ab0Decode7(in *jlexer.Lexer, out *struct {
	SSOID string `json:"SSOID"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "SSOID":
			out.SSOID = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonBc289ab0Encode7(out *jwriter.Writer, in struct {
	SSOID string `json:"SSOID"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"SSOID\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.SSOID))
	}
	out.RawByte('}')
}
